<?php

declare(strict_types=1);

namespace 認証\アプリ\ユースケース;

use 共通\トランザクション\トランザクションインターフェース;
use 認証\ドメイン\モデル\SNSアカウント;
use 認証\ドメイン\モデル\ユーザID;
use 認証\ドメイン\モデル\ユーザファクトリ;
use 認証\ドメイン\モデル\ユーザリポジトリインターフェース;
use 認証\ドメイン\モデル\ログインユーザインターフェース;
use 認証\ドメイン\モデル\ドライバインターフェース;

class 会員ユーザ紐付け
{
    private $トランザクション;
    private $ドライバ;
    private $ユーザリポ;
    private $ユーザファクトリ;
    private $ログインユーザ;

    public function __construct(
        トランザクションインターフェース $トランザクション,
        ドライバインターフェース $ドライバ,
        ユーザリポジトリインターフェース $ユーザリポ,
        ユーザファクトリ $ユーザファクトリ,
        ログインユーザインターフェース $ログインユーザ
    ) {
        $this->トランザクション = $トランザクション;
        $this->ユーザリポ = $ユーザリポ;
        $this->ユーザファクトリ = $ユーザファクトリ;
        $this->ドライバ = $ドライバ;
        $this->ログインユーザ = $ログインユーザ;
    }

    public function 実行(string $SNS名)
    {
        $this->トランザクション->スコープ(function () use ($SNS名) {
            $SNSから取得したアカウント = $this->ドライバ->アカウント取得($SNS名);
            $SNSアカウント = new SNSアカウント(
                $SNS名,
                $SNSから取得したアカウント->getId(),
                $SNSから取得したアカウント->getEmail(),
            );

            $紐付け済みユーザ = $this->ユーザリポ->SNS紐付け済みユーザを1件取得($SNSアカウント->SNS名(), $SNSアカウント->id());
            if ($紐付け済みユーザ !== null) {
                return $紐付け済みユーザ;
            }

            if ($this->ログインユーザ::ログイン済みか()) {
                $登録済みユーザ = $this->ユーザリポ->IDで1件取得(new ユーザID($this->ログインユーザ::id()));
            } else {
                $ユーザ = $this->ユーザファクトリ->作成する(
                    $SNSアカウント->メール(),
                    null, //SNS側にログインを委譲するため、パスワードを必要としない
                );
                $登録済みユーザ = $this->ユーザリポ->保存($ユーザ);
            }

            $登録済みユーザ = $this->ユーザリポ->SNSアカウント紐付け(new ユーザID($登録済みユーザ->id()), $SNSアカウント);

            $this->ログインユーザ::ユーザーIDのみで自動ログインする($登録済みユーザ->id());
        });
    }
}
