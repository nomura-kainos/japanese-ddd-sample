<?php

declare(strict_types=1);

namespace 商品\アプリ\ユースケース;

use 共通\トランザクション\トランザクションインターフェース;
use 商品\ドメイン\モデル\アップロード\ファイル;
use 商品\ドメイン\モデル\カテゴリ;
use 商品\ドメイン\モデル\レンタル料金;
use 商品\ドメイン\モデル\商品ID;
use 商品\ドメイン\モデル\商品ファクトリ;
use 商品\ドメイン\モデル\商品リポジトリインターフェース;
use 商品\ドメイン\モデル\アップロード\画像アップローダインターフェース;

class 登録
{
    private $トランザクション;
    private $商品リポ;
    private $商品ファクトリ;
    private $画像アップローダ;

    public function __construct(
        トランザクションインターフェース $トランザクション,
        商品リポジトリインターフェース $商品リポ,
        商品ファクトリ $商品ファクトリ,
        画像アップローダインターフェース $画像アップローダ
    ) {
        $this->トランザクション = $トランザクション;
        $this->商品リポ = $商品リポ;
        $this->商品ファクトリ = $商品ファクトリ;
        $this->画像アップローダ = $画像アップローダ;
    }

    public function 実行(string $名前, int $レンタル料金, array $カテゴリ, $複数画像ファイル)
    {
        $this->トランザクション->スコープ(function () use ($名前, $レンタル料金, $カテゴリ, $複数画像ファイル) {
            $商品 = $this->商品ファクトリ->作成する(
                $名前,
                new レンタル料金($レンタル料金),
                new カテゴリ($カテゴリ['大カテゴリid'], $カテゴリ['小カテゴリid'])
            );

            $this->商品リポ->保存($商品);

            $商品id = new 商品ID($商品->id());
            foreach ($複数画像ファイル as $画像ファイル) {
                $ファイル = $this->画像アップローダ->ストレージに送信する(new ファイル($画像ファイル));
                $this->商品リポ->画像を保存($ファイル, $商品id);
            }
        });
    }
}
